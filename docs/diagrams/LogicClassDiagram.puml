@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Script {
Class ScriptManager
}

package CommandParser {
Interface CommandParser <<Interface>>
Class CommandLineParser
Class XYZCommandParser
Class CliSyntax
Class CommandParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class XYZCommand
Class CommandResult
Class "{abstract}\nCommand" as Command
}

package Rule {
Interface Testable <<Interface>>
Interface Actionable <<Interface>>
Class "{abstract}\nTestableExpression" as TestableExpression
Class "{abstract}\nActionableExpression" as ActionableExpression
Class TUVExpression
Class ABCExpression
}

Interface Logic <<Interface>>
Class LogicManager
}

package Model{
Class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ...> Logic

LogicManager .up.|> Logic
LogicManager --->"1" CommandLineParser
CommandLineParser .left.> XYZCommandParser: creates >

XYZCommandParser ..> XYZCommand : creates >
XYZCommandParser ..|> CommandParser
XYZCommandParser ..> ArgumentMultimap
XYZCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
XYZCommandParser ..> CliSyntax
CliSyntax ..> Prefix
XYZCommandParser ..> CommandParserUtil
CommandParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
XYZCommand -up-|> Command
LogicManager .left.> Command : executes >

TestableExpression .right.|> Testable
ActionableExpression .right.|> Actionable
TUVExpression -right-|> TestableExpression
ABCExpression -right-|> ActionableExpression
LogicManager .left.> Testable : tests >
LogicManager .left.> Actionable : performs >
ActionableExpression -[hidden]-> TestableExpression

LogicManager -up--> ScriptManager
Command .up.> ScriptManager

LogicManager -left-> Model
Command .left.> Model
note right of XYZCommand: XYZCommand = AccountAddCommand, etc

Logic ..> CommandResult
LogicManager .down.> CommandResult
Command .up.> CommandResult
CommandResult -[hidden]-> CommandParser
@enduml
